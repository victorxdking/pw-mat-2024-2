import * as React from 'react'
// üê® voc√™ vai precisar dos seguintes itens de '../pokemon':
// fetchPokemon: a fun√ß√£o que retorna as informa√ß√µes do pok√©mon
// PokemonInfoFallback: o que √© exibido enquanto as informa√ß√µes do pok√©mon
// s√£o carregadas
// PokemonDataView: o componente usado para exibir as informa√ß√µes do pok√©mon
import { 
  PokemonForm,
  fetchPokemon,
  PokemonInfoFallback,
  PokemonDataView
} from '../pokemon'

function PokemonInfo({pokemonName}) {
  // üê® crie o estado para o pok√©mon (null)
  // const [pokemon, setPokemon] = React.useState(null)
  // const [error, setError] = React.useState(false)
  // const [status, setStatus] = React.useState('ocioso')

  // Convertendo tr√™s vari√°veis de estado avulsas para uma √∫nica
  // vari√°vel de estado em forma de objeto
  const [state, setState] = React.useState({
    pokemon: null,
    error: false,
    status: 'ocioso'
  })
  // Para facilitar o c√≥digo, podemos criar vari√°veis somente-leitura
  // a partir da vari√°vel de estado de objeto usando desestrutura√ß√£o
  const { pokemon, error, status } = state

  React.useEffect(() => {
    console.count('Atualizou estado')
  })  // Sem vetor de depend√™ncias, ser√° executado ap√≥s 
      // qualquer atualiza√ß√£o de estado

  // üê® crie React.useEffect de modo a ser chamado sempre que pokemonName mudar.
  // üí∞ N√ÉO SE ESQUE√áA DO VETOR DE DEPEND√äNCIAS!
  React.useEffect(() => {

    // üí∞ se pokemonName √© falso (ou uma string vazia) n√£o se preocupe em fazer 
    // a requisi√ß√£o (retorne precocemente).
    if(! pokemonName) return

    // üê® antes de chamar `fetchPokemon`, limpe o estado atual do pokemon
    // ajustando-o para null.

    // // Para atualizar apenas o campo 'pokemon';
    // const stateCopy = { ...state }
    // stateCopy.pokemon = 'novo valor'
    // setState(stateCopy)
    // // Para facilitar, √© poss√≠vel fazer todas as opera√ß√µes
    // // numa √∫nica linha
    // setState({ ...state, pokemon: 'novo valor' })

    // setPokemon(null)
    // setError(false)
    // setStatus('ocioso')

    // Atualizando os tr√™s status simultamenamente, gerando apenas
    // UM redesenho do componente
    setState({ pokemon: null, error: false, status: 'ocioso' })

    // fetchPokemon() enviar√° pokemonName para o servidor remoto e aguardar√°
    // o retorno de pokemonData. Quando pokemonData for retornado, atualiza
    // a vari√°vel de estado pokemon com as informa√ß√µes contidas em pokemonData
    // setStatus('pendente')
    setState({ ...state, status: 'pendente' })
    fetchPokemon(pokemonName)
      // then() √© chamado quando a requisi√ß√£o d√° certo
      .then(
        pokemonData => {
          // setPokemon(pokemonData)
          // setStatus('resolvida')
          setState({ ...state, pokemon: pokemonData, status: 'resolvida' })
        }
      )
      // catch() √© chamado quando a requisi√ß√£o d√° erro
      .catch(
        // Guardamos o erro em um estado para depois exibir a
        // respectiva mensagem
        error => {
          // setError(error)
          // setStatus('rejeitada')
          setState({ ...state, error, status: 'rejeitada' })
        }
      )
p
  }, [pokemonName])

  // üê® retorne o seguinte baseado nos estados `pokemon` e `pokemonName`:
  //   1. n√£o h√° pokemonName: 'Informe um pok√©mon'
  //   2. tem pokemonName mas n√£o pokemon: <PokemonInfoFallback name={pokemonName} />
  //   3. tem pokemon: <PokemonDataView pokemon={pokemon} />

  // if(error) return <div role="alert">
  //   Houve um erro: <pre style={{ whiteSpace: 'normal' }}>
  //     {error.message}
  //   </pre>
  // </div>
  // if(! pokemonName) return 'Informe um pok√©mon'   // 1.
  // else if(pokemonName && ! pokemon) 
  //   return <PokemonInfoFallback name={pokemonName} /> // 2.
  // else if(pokemon) return <PokemonDataView pokemon={pokemon} />   // 3.

  switch(status) {
    case 'ocioso':
      return 'Informe um pok√©mon'
    
    case 'pendente':
      return <PokemonInfoFallback name={pokemonName} />

    case 'resolvida':
      return <PokemonDataView pokemon={pokemon} />

    default:    // case 'rejeitada'
      return <div role="alert">
        Houve um erro: <pre style={{ whiteSpace: 'normal' }}>
          {error.message}
        </pre>
      </div>
  }
}

function Exercicio06() {
  const [pokemonName, setPokemonName] = React.useState('')

  function handleSubmit(newPokemonName) {
    setPokemonName(newPokemonName)
  }

  return (
    <div className="pokemon-info-app">
      <PokemonForm pokemonName={pokemonName} onSubmit={handleSubmit} />
      <hr />
      <div className="pokemon-info">
        <PokemonInfo pokemonName={pokemonName} />
      </div>
    </div>
  )
}

export default Exercicio06